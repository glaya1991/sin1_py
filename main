import my_stdint
import my_math as _math
import matplotlib.pyplot as plt
import math
import numpy as np
import time
from matplotlib.widgets import Button
from PIL import Image, ImageDraw, ImageFont

# Globals
Fs = 200
f1 = 10
N_T = int(Fs / f1)  # Number of points per 1 period
N = (1 << _math.nextpow2(N_T)) * 2
print("N_T = {0}, N = {1}\n".format(N_T, N))

x = []
y = []

freqs = np.arange(2, 20, 3)
# t = np.arange(0.0, 1.0, 0.001)
# s = np.sin(2*np.pi*freqs[0]*t)
# y = np.sin(2*np.pi*freqs[0]*t)

plt.figure(1)
#ax = plt.subplots()
plt.grid(True)
(l,) = plt.plot(x, y, lw=2)
print(l)


class Index(object):
    ind = 0

    def next(self, event):
        self.ind += 1
        ifreq = self.ind % len(freqs)
        ydata = [(100 * (math.sin(2 * math.pi * (freqs[ifreq] / Fs) * i))) for i in range(N)]
        l.set_ydata(ydata)
        plt.draw()

    def prev(self, event):
        self.ind -= 1
        ifreq = self.ind % len(freqs)
        ydata = [(100 * (math.sin(2 * math.pi * (freqs[ifreq] / Fs) * i))) for i in range(N)]
        l.set_ydata(ydata)
        plt.draw(figure=1)


def draw_pic():
    alphabet = u"\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7fрстуфхцчшщъыьэюяАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп"
    len_alphabet = len(alphabet)
    print("len_alphabet: ", len_alphabet)

    fontname = ["Arial", "Verdana"]
    fontdir = [ "C:\Windows\Fonts\Arial.ttf",
                 "C:\Windows\Fonts\Verdana.ttf"]
    fontsize = [9, 10, 12, 14, 16, 18]
    font = ImageFont.truetype(fontdir[1], fontsize[2])

    # calculate max width and height of letter
    wmax = 0
    hmax = 0
    wmean = 0
    for symbol in range(len_alphabet):
        text = alphabet[symbol]
        w, h = font.getsize(text)
        if (w > wmax):
            wmax = w
        if (h > hmax):
            hmax = h
        wmean = wmean + w

    wmean = int(wmean / len_alphabet)
    print("wmax = {0:2d}, hmax = {1:2d}".format(wmax, hmax))

    file1 = open("testfile_font_{0}x{1:2d}.txt".format(fontname[1], fontsize[2]), "w")
    file1.write("/*\tfont: %s\t*/\r\n" % fontname[1])
    file1.write("/*\tfontsize: %d\t\t*/\r\n" % (fontsize[2]))
    file1.write("#define CHAR_WDT_%dx%d\t%d\n" % (wmax, hmax, wmax))
    file1.write("#define CHAR_HGH_%dx%d\t%d\n\n" % (wmax, hmax, hmax))
    file1.write("#define CHAR_WMEAN_%dx%d\t%d\n\n" % (wmax, hmax, wmean))
    file1.write("/*w={:d}, h={:d}  */ \n".format(wmax, hmax))
    if (hmax > 16):
        file1.write("static const uint32_t font_%dx%d[%d][%d]={\n" % (wmax, hmax, len_alphabet, wmax + 2))
    else:
        file1.write("static const uint16_t font_%dx%d[%d][%d]={\n" % (wmax, hmax, len_alphabet, wmax + 2))

    WDT = 1200
    HGH= 200
    TextX0 = 10
    TextY0 = 10

    im = Image.new(mode="1", size=(100, 100), color="white")
    imdraw = ImageDraw.Draw(im)
    imdraw.rectangle(xy=[(0,0), (WDT,HGH)], fill="black")
    imdraw.rectangle(xy=[(1, 1), (WDT-1, HGH-1)], fill="white")
    #imdraw.line(xy=[(100, 100), (WDT-1,(HGH>>1)-1)], fill="black")
    #imdraw.text(xy=[TextX0, TextY0], text=alphabet, font=font, fill="black")

    for symbol in range(len_alphabet):
        text = alphabet[symbol]
        imdraw.text(xy=[TextX0, TextY0], text=text, font=font, fill="black")
        arr = []
        (xmax, ymax) = font.getsize(text)

        code = text.encode('utf-8')
        file1.write("/* {:3s}\t0x{:03x}\t0x{:03x}*/\t".format(text, ord(text), code[-1]))
        str1 = ("\t{%02d,\t%02d,\t" % (xmax, ymax))
        file1.write(str1)

        for i in range(xmax):
            letter = 0
            for j in range(ymax):
                val = 0xff-im.getpixel(xy=(TextX0+i, TextY0+j))  #&0x01
                arr.append(val)
                letter = letter + ((val&0x01) << j)
                print("{0:3d} ".format(val), end= ' ')

            file1.write(hex(letter).format("%04X"))
            if (i < (xmax - 1)):
                file1.write(",\t")
            print("")
        print("")

        xlast= xmax
        print("xmax= {0}, wmax = {1}\n".format(xmax, wmax))
        while (xlast < (wmax)):
            file1.write(",\t0x00")
            xlast = xlast + 1

        file1.write("},\n")

        imdraw.rectangle(xy=[(TextX0, TextY0), (TextX0+xmax, TextY0+ymax)], fill="white")
    #im.show()

    file1.write("}\n")
    file1.close()

def main():

    itime = range(N)
    signal = [(100 * (math.sin(2 * math.pi * (f1 / Fs) * i))) for i in range(N)]

    # file1 = open("sin123.txt", "w")
    # for i in range(N):
    #     # print(val, ', ')
    #     file1.write("%3.2f, " % signal[i])
    #     if (i + 1) % 16 == 0: file1.write("\r\n")
    # file1.close()

    x.extend(itime)
    y.extend(signal)

    xmax = max(x)
    xmin = 0
    ymax = max(y)
    ymin = min(y)

    print('x_max ', xmax)
    print('y_max= ', ymax)
    print('y_min= ', ymin)

    plt.xlim(0, xmax)
    plt.ylim(int(ymin*1.5), int(ymax*1.5))
    l.set_xdata(x)
    l.set_ydata(y)

#   Spectr        #
    plt.figure(2)
    sp = np.fft.fft(y)
    sp_norm = [2 * abs(i) / N for i in sp]
    df = Fs / (N)
    f = [i * df for i in x]
    (l1,) = plt.plot(f, sp_norm, color='blue', linewidth=0.8)
    plt.xlim(0, max(f))
    plt.ylim(0, max(sp_norm) * 1.5)
    print('df=', df)

    plt.figure(1)
    callback = Index()
    axprev = plt.axes([0.7, 0.05, 0.1, 0.075])
    axnext = plt.axes([0.81, 0.05, 0.1, 0.075])
    bnext = Button(axnext, 'Next')
    bnext.on_clicked(callback.next)
    bprev = Button(axprev, 'Previous')
    bprev.on_clicked(callback.prev)


    draw_pic()

    #plt.show()



# Start prog:
main()


